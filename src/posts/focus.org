#+TITLE: Focus
#+SUBTITLE: The focus or the essence of a programming language is often the lynchpin of its design.
#+DATE: <2016-03-25>

Focus is a design element in programming languages that I think deserves
more attention than it gets.

A focused language puts emphasis on a set of coherent idioms.
Multi-paradigm languages like C++ or C# are unfocused because they lack
a certain principle.

Take C, for instance. You /can/ do OOP in C, but it's awkward. You need
structures full of function pointers and the language wasn't designed
for it: it's not a good idea to do it. The point is that you /can/ but
you shouldn't.

Focus is not so much of what a language /has/ but something that it
/embodies/. A single-paradigm language can still be unfocused, because
there can be several ways to wield the singular paradigm. A
multi-paradigm language can be focused if the multi-paradigm languages
connect at a higher level. Focus can be implemented as a coding standard
or it can be something that everybody understands as the idiomatic way
of doing things.

Focus is not always a positive trait but it rarely is a negative trait.
On the other hand, a lack of focus is more often negative than positive.

Take Haskell, a pure functional language, effectively single-paradigm;
it is a very special case. The language itself is absolutely focused to
the point of extreme autism, but its flexible type system and vibrant
community, there are many ways to program Haskell. Do you absolutely
need state? Use state, but be careful. Do you want IO without monads?
Well, sure, but be careful.

At a high level, Haskell code is /pure/. It permits some inconsistencies
with its principal paradigm but it eschews them and this is the key
difference.

A bigger problem with focus is that it often is intangible. It's easier
to point out languages that are unfocused than those that are. Focus is
about philosophy. Some language are very philosophical. For instance,
Clojure is just as much about its particular approach to concurrency,
state and identity, that is a language implementing those ideas. The
language caught on because Rich Hickey, the author, did not market it as
the tool that would have solved everybody's problems, but because he
marketed the /ideas/ that Clojure represented as a solution to common
programming problems.

#+BEGIN_QUOTE
  If you want to build a ship, don't drum up the men to gather wood, divide the
  work and give orders. Instead, teach them to yearn for the vast and endless
  sea.

  @@html:<footer class="blockquote-footer">Antoine de Saint-Exup√©ry</footer>@@
#+END_QUOTE

In this context, Clojure can be seen as a focused language. These core
philosophies are what constitute the language, the fact that Clojure
happens to be a Lisp dialect implementing the philosophies is secondary
in my mind. With that in mind, I acknowledge being a Lisp is also a core
part of Clojure, but its principles about state and identity can be
implemented in any language. Clojure does /let/ you do OOP but it feels
awkward. When you grok Clojure you understand what that means: the
language can be bent for that purpose, but it doesn't want to be. Its
philosophy is like a memory-foam, if you tamper with it, it will
coalesce back into its original form. When you see /that/, it's the
moment you understand what Clojure---or any other language---is about.

Some languages double down on philosophy by making it a part of a coding
standard and enforcing it: Go. Go embodies simplicity and intuition,
intentionally eschewing things that are not modern, but complex, opting
to keep the core language simple. Some chalk this down as a negative
trait, others love it; I find it to be both good and bad. Good, because
I can jump into any Go codebase and get its purpose in minutes; bad,
because sometimes I want to use abstractions for which Go is unsuitable.
I respect its design philosophy, because it has one, and absolutely
flaunts it. It's not just a structural type system, it's an /idea/.

Scala is another beast. It began as an experiment, trying to augment and
fix the deficiencies of Java. It was designed by brilliant PLT theorists
and the language is a beautiful and magnanimous behemoth. Scala has so
many features that it eschews focus either intentionally or
unintentionally. On the other hand, Scala is capable of many great
things. But if you ask two Scala programmers what Scala represents to
them, you may get different answers.

It can be a technical aspect. To some, it might be about Shapeless or
all the cool things that go with it. Macros. DSLs. Code generation. Or
it could be how Akka or Spark are amazing tools. It could also be a
philosophical difference. Some people want an advanced type system and
don't want to be constrained by the laziness and purity of Haskell.
Others want the JVM. Some just want a better Java. Some just happen to
use it for Spark.

I would choose the simpler Scala, the better Java. Trait-based generics,
sum types, implicits, and functional programming, to name a few. This is
not just because it's less complicated, from a business perspective, it
makes it easier to hire new programmers.

As a professional Scala developer and a long-time functional programming
enthusiast, I fear that I may never comfortably jump to another company,
confident that since I've written Scala, I can understand their Scala.
That, or years of experience, but who knows what's enough? Their,
whoever they may be, Scala might not be the simple Scala I and my
colleagues prefer.

This is scary. For the future of the language, this is an untenable
position. While I absolutely enjoy working with the language, I'm afraid
that it is fated to be like Macbeth from Shakespeare: "thou shalt get
kings, though thou be none". Thus, Scala will inspire a great language
and then die. Maybe it already did, and the clock is ticking. Some
purport Kotlin as the successor, but I wouldn't bet on it just yet.

#+BEGIN_QUOTE
Ah, but a man's reach should exceed his grasp, or what's a heaven for?

@@html:<footer class="blockquote-footer">Robert Browning</footer>@@
#+END_QUOTE

The thing about Scala is that this is a conscious design decision. The
language is /meant/ to have everything and the kitchen sink. Programming
languages don't have to be simple. Powerful languages are powerful
tools. Use them well, you can achieve greatness. You have to /choose/
your tool set and hone it.

But for Haskell, Go, and Clojure, you're using them, and you're
thinking, what is the natural way to do this? Once you find it, you find
yourself implementing ideas using that philosophy, that natural way, and
you're no longer just using a tool. You're using an /idea/.
